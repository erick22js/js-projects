
/**
	VIDEO SETS
*/

const WIDTH = Number(display.width);
const HEIGHT = Number(display.height);
const HWIDTH = WIDTH*.5;
const HHEIGHT = HEIGHT*.5;
const RATIO = HEIGHT/WIDTH;

const GC = display.getContext("2d");
const HDMA = GC.getImageData(0, 0, WIDTH, HEIGHT);
const VGA = new Uint32Array(HDMA.data.buffer);


/**
	DISPLAY FUNCTIONS
*/

display.clear = function(){
	VGA.fill(0);
}

display.setPixel = function(x, y, color){
	VGA[y*WIDTH+x] = color;
}

display.flush = function(){
	GC.putImageData(HDMA, 0, 0);
}


/**
	DEFAULT PALETE
*/

var palete = new Uint8Array(
	[
		0x00, 0x00, 0x00, 0xff, 0x0b, 0x17, 0x1f, 0xff, 0x07, 0x0f, 0x17, 0xff, 0x4b, 0x4b, 0x4b, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0x1b, 0x1b, 0x1b, 0xff, 0x13, 0x13, 0x13, 0xff, 0x0b, 0x0b, 0x0b, 0xff, 0x07, 0x07, 0x07, 0xff, 0x1f, 0x37, 0x2f, 0xff, 0x0f, 0x2b, 0x23, 0xff, 0x07, 0x1f, 0x17, 0xff, 0x00, 0x17, 0x0f, 0xff, 0x2b, 0x3b, 0x4f, 0xff, 0x23, 0x33, 0x47, 0xff, 0x1b, 0x2b, 0x3f, 0xff, 
		0xb6, 0xb6, 0xfe, 0xff, 0xaa, 0xaa, 0xf6, 0xff, 0xa2, 0xa2, 0xf2, 0xff, 0x96, 0x96, 0xea, 0xff, 0x8e, 0x8e, 0xe6, 0xff, 0x86, 0x86, 0xde, 0xff, 0x7a, 0x7a, 0xda, 0xff, 0x72, 0x72, 0xd2, 0xff, 0x6a, 0x6a, 0xca, 0xff, 0x62, 0x62, 0xc6, 0xff, 0x5a, 0x5a, 0xbe, 0xff, 0x56, 0x56, 0xba, 0xff, 0x4e, 0x4e, 0xb2, 0xff, 0x46, 0x46, 0xae, 0xff, 0x3e, 0x3e, 0xa6, 0xff, 0x3a, 0x3a, 0xa2, 0xff, 
		0x33, 0x33, 0x9b, 0xff, 0x2f, 0x2f, 0x97, 0xff, 0x2b, 0x2b, 0x8f, 0xff, 0x23, 0x23, 0x8b, 0xff, 0x1f, 0x1f, 0x83, 0xff, 0x1b, 0x1b, 0x7f, 0xff, 0x17, 0x17, 0x77, 0xff, 0x13, 0x13, 0x73, 0xff, 0x0f, 0x0f, 0x6b, 0xff, 0x0b, 0x0b, 0x67, 0xff, 0x07, 0x07, 0x5f, 0xff, 0x07, 0x07, 0x5b, 0xff, 0x07, 0x07, 0x53, 0xff, 0x00, 0x00, 0x4f, 0xff, 0x00, 0x00, 0x47, 0xff, 0x00, 0x00, 0x43, 0xff, 
		0xde, 0xea, 0xfe, 0xff, 0xd2, 0xe2, 0xfe, 0xff, 0xc6, 0xda, 0xfe, 0xff, 0xba, 0xd2, 0xfe, 0xff, 0xb2, 0xce, 0xfe, 0xff, 0xa6, 0xc6, 0xfe, 0xff, 0x9a, 0xbe, 0xfe, 0xff, 0x92, 0xba, 0xfe, 0xff, 0x82, 0xb2, 0xfe, 0xff, 0x7a, 0xaa, 0xf6, 0xff, 0x72, 0xa2, 0xee, 0xff, 0x6a, 0x9a, 0xe6, 0xff, 0x62, 0x92, 0xde, 0xff, 0x5a, 0x8a, 0xd6, 0xff, 0x52, 0x82, 0xce, 0xff, 0x4e, 0x7e, 0xca, 0xff, 
		0x4b, 0x7b, 0xbf, 0xff, 0x47, 0x73, 0xb3, 0xff, 0x43, 0x6f, 0xab, 0xff, 0x3f, 0x6b, 0xa3, 0xff, 0x3b, 0x63, 0x9b, 0xff, 0x37, 0x5f, 0x8f, 0xff, 0x33, 0x57, 0x87, 0xff, 0x2f, 0x53, 0x7f, 0xff, 0x2b, 0x4f, 0x77, 0xff, 0x27, 0x47, 0x6b, 0xff, 0x23, 0x43, 0x5f, 0xff, 0x1f, 0x3f, 0x53, 0xff, 0x1b, 0x37, 0x4b, 0xff, 0x17, 0x2f, 0x3f, 0xff, 0x13, 0x2b, 0x33, 0xff, 0x0f, 0x23, 0x2b, 0xff, 
		0xee, 0xee, 0xee, 0xff, 0xe6, 0xe6, 0xe6, 0xff, 0xde, 0xde, 0xde, 0xff, 0xda, 0xda, 0xda, 0xff, 0xd2, 0xd2, 0xd2, 0xff, 0xca, 0xca, 0xca, 0xff, 0xc6, 0xc6, 0xc6, 0xff, 0xbe, 0xbe, 0xbe, 0xff, 0xb6, 0xb6, 0xb6, 0xff, 0xb2, 0xb2, 0xb2, 0xff, 0xaa, 0xaa, 0xaa, 0xff, 0xa6, 0xa6, 0xa6, 0xff, 0x9e, 0x9e, 0x9e, 0xff, 0x96, 0x96, 0x96, 0xff, 0x92, 0x92, 0x92, 0xff, 0x8a, 0x8a, 0x8a, 0xff, 
		0x82, 0x83, 0x82, 0xff, 0x7e, 0x7f, 0x7e, 0xff, 0x76, 0x77, 0x76, 0xff, 0x6e, 0x6f, 0x6e, 0xff, 0x6a, 0x6b, 0x6a, 0xff, 0x62, 0x63, 0x62, 0xff, 0x5a, 0x5b, 0x5a, 0xff, 0x56, 0x57, 0x56, 0xff, 0x4e, 0x4f, 0x4e, 0xff, 0x46, 0x47, 0x46, 0xff, 0x42, 0x43, 0x42, 0xff, 0x3a, 0x3b, 0x3a, 0xff, 0x36, 0x37, 0x36, 0xff, 0x2e, 0x2e, 0x2e, 0xff, 0x26, 0x26, 0x26, 0xff, 0x22, 0x22, 0x22, 0xff, 
		0x6f, 0xfe, 0x77, 0xff, 0x67, 0xee, 0x6f, 0xff, 0x5f, 0xde, 0x67, 0xff, 0x57, 0xce, 0x5f, 0xff, 0x4f, 0xbe, 0x5b, 0xff, 0x47, 0xae, 0x53, 0xff, 0x3f, 0x9e, 0x4b, 0xff, 0x37, 0x92, 0x43, 0xff, 0x2f, 0x82, 0x3f, 0xff, 0x2b, 0x72, 0x37, 0xff, 0x23, 0x62, 0x2f, 0xff, 0x1b, 0x52, 0x27, 0xff, 0x17, 0x43, 0x1f, 0xff, 0x0f, 0x33, 0x17, 0xff, 0x0b, 0x23, 0x13, 0xff, 0x07, 0x17, 0x0b, 0xff, 
		0x8e, 0xa6, 0xbe, 0xff, 0x86, 0x9e, 0xb6, 0xff, 0x7e, 0x96, 0xae, 0xff, 0x76, 0x8e, 0xa6, 0xff, 0x6e, 0x86, 0x9e, 0xff, 0x6a, 0x7e, 0x9a, 0xff, 0x62, 0x7a, 0x92, 0xff, 0x5a, 0x72, 0x8a, 0xff, 0x57, 0x6b, 0x82, 0xff, 0x4f, 0x63, 0x7a, 0xff, 0x4a, 0x5f, 0x76, 0xff, 0x42, 0x57, 0x6e, 0xff, 0x3e, 0x52, 0x66, 0xff, 0x36, 0x4a, 0x5e, 0xff, 0x32, 0x42, 0x56, 0xff, 0x2e, 0x3f, 0x52, 0xff, 
		0x62, 0x83, 0x9f, 0xff, 0x52, 0x77, 0x8f, 0xff, 0x4a, 0x6b, 0x83, 0xff, 0x3e, 0x5f, 0x77, 0xff, 0x32, 0x53, 0x67, 0xff, 0x2a, 0x47, 0x5b, 0xff, 0x22, 0x3a, 0x4f, 0xff, 0x1b, 0x33, 0x43, 0xff, 0x63, 0x7f, 0x7b, 0xff, 0x57, 0x73, 0x6f, 0xff, 0x4f, 0x6b, 0x67, 0xff, 0x47, 0x63, 0x5b, 0xff, 0x3b, 0x57, 0x53, 0xff, 0x33, 0x4f, 0x47, 0xff, 0x2b, 0x46, 0x3f, 0xff, 0x26, 0x3e, 0x37, 0xff, 
		0x72, 0xfe, 0xfe, 0xff, 0x56, 0xda, 0xea, 0xff, 0x42, 0xba, 0xd6, 0xff, 0x2e, 0x9a, 0xc3, 0xff, 0x1e, 0x7a, 0xaf, 0xff, 0x12, 0x5a, 0x9b, 0xff, 0x06, 0x42, 0x87, 0xff, 0x00, 0x2b, 0x73, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xda, 0xda, 0xfe, 0xff, 0xba, 0xba, 0xfe, 0xff, 0x9a, 0x9a, 0xfe, 0xff, 0x7a, 0x7a, 0xfe, 0xff, 0x5e, 0x5e, 0xfe, 0xff, 0x3e, 0x3e, 0xfe, 0xff, 0x1e, 0x1e, 0xfe, 0xff, 
		0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0xee, 0xff, 0x00, 0x00, 0xe2, 0xff, 0x00, 0x00, 0xd6, 0xff, 0x00, 0x00, 0xca, 0xff, 0x00, 0x00, 0xbe, 0xff, 0x00, 0x00, 0xb2, 0xff, 0x00, 0x00, 0xa6, 0xff, 0x00, 0x00, 0x9a, 0xff, 0x00, 0x00, 0x8a, 0xff, 0x00, 0x00, 0x7e, 0xff, 0x00, 0x00, 0x72, 0xff, 0x00, 0x00, 0x66, 0xff, 0x00, 0x00, 0x5a, 0xff, 0x00, 0x00, 0x4e, 0xff, 0x00, 0x00, 0x42, 0xff, 
		0xfe, 0xe6, 0xe6, 0xff, 0xfe, 0xc7, 0xc7, 0xff, 0xfe, 0xab, 0xab, 0xff, 0xfe, 0x8f, 0x8f, 0xff, 0xfe, 0x73, 0x73, 0xff, 0xfe, 0x53, 0x53, 0xff, 0xfe, 0x37, 0x37, 0xff, 0xfe, 0x1b, 0x1b, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xe2, 0x00, 0x00, 0xff, 0xca, 0x00, 0x00, 0xff, 0xb2, 0x00, 0x00, 0xff, 0x9a, 0x00, 0x00, 0xff, 0x82, 0x00, 0x00, 0xff, 0x6a, 0x00, 0x00, 0xff, 0x52, 0x00, 0x00, 0xff, 
		0xfe, 0xfe, 0xff, 0xff, 0xda, 0xeb, 0xff, 0xff, 0xba, 0xd7, 0xff, 0xff, 0x9a, 0xc7, 0xff, 0xff, 0x7a, 0xb3, 0xff, 0xff, 0x5a, 0xa3, 0xff, 0xff, 0x3a, 0x8f, 0xff, 0xff, 0x1a, 0x7f, 0xfe, 0xff, 0x16, 0x72, 0xf2, 0xff, 0x0e, 0x6e, 0xea, 0xff, 0x0e, 0x66, 0xde, 0xff, 0x0a, 0x5e, 0xd6, 0xff, 0x07, 0x56, 0xca, 0xff, 0x00, 0x4e, 0xc2, 0xff, 0x00, 0x46, 0xb6, 0xff, 0x00, 0x42, 0xae, 0xff, 
		0xfe, 0xfe, 0xfe, 0xff, 0xd6, 0xfe, 0xfe, 0xff, 0xb2, 0xfe, 0xfe, 0xff, 0x8e, 0xfe, 0xfe, 0xff, 0x6a, 0xfe, 0xfe, 0xff, 0x46, 0xfe, 0xfe, 0xff, 0x22, 0xfe, 0xfe, 0xff, 0x00, 0xfe, 0xfe, 0xff, 0x00, 0x3f, 0xa7, 0xff, 0x00, 0x37, 0x9f, 0xff, 0x00, 0x2f, 0x93, 0xff, 0x00, 0x22, 0x87, 0xff, 0x27, 0x3a, 0x4f, 0xff, 0x1b, 0x2e, 0x43, 0xff, 0x13, 0x22, 0x37, 0xff, 0x0b, 0x1b, 0x2f, 0xff, 
		0x52, 0x00, 0x00, 0xff, 0x46, 0x00, 0x00, 0xff, 0x3a, 0x00, 0x00, 0xff, 0x2e, 0x00, 0x00, 0xff, 0x22, 0x00, 0x00, 0xff, 0x16, 0x00, 0x00, 0xff, 0x0a, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x43, 0x9f, 0xff, 0xff, 0x4b, 0xe6, 0xff, 0xff, 0xff, 0x7a, 0xff, 0xff, 0xfe, 0x00, 0xfe, 0xff, 0xce, 0x00, 0xce, 0xff, 0x9a, 0x00, 0x9e, 0xff, 0x6b, 0x00, 0x6f, 0xff, 0x6b, 0x6b, 0xa7, 0xff,
	]
);

palete = new Uint32Array(palete.buffer);

for(var pi=0; pi<256; pi++){
	var col = palete[pi];
	col = ((col&0xff)<<16)|(col&0xff00)|((col&0xff0000)>>16)|0xff000000;
	palete[pi] = col;
}


/**
	DISPLAY RENDERING
*/

const _drender = {
	lastTime: 0,
	running: true,
}

function _animate(time){
	var dt = (time-_drender.lastTime)/1000;
	_drender.lastTime = time;
	update(dt);
	display.flush();
	if(_drender)
		requestAnimationFrame(_animate);
}

window.onload = function(){
	initialize();
	_animate(0);
}
